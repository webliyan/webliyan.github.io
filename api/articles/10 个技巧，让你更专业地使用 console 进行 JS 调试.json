{"title":"10 个技巧，让你更专业地使用 console 进行 JS 调试","slug":"10 个技巧，让你更专业地使用 console 进行 JS 调试","date":"2018-03-29T02:34:26.517Z","updated":"2018-03-29T02:50:42.927Z","comments":true,"path":"api/articles/10 个技巧，让你更专业地使用 console 进行 JS 调试.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p>原文出处： <a href=\"https://medium.com/appsflyer/10-tips-for-javascript-debugging-like-a-pro-with-console-7140027eb5f6\" target=\"_blank\" rel=\"noopener\">Yotam Kadishay</a>   译文出处：<a href=\"http://elevenbeans.github.io/2018/03/10/10-Tips-for-JS-Debugging-with-Console/\" target=\"_blank\" rel=\"noopener\">elevenbeans</a></p>\n<h3 id=\"Tip-1-console-trace\"><a href=\"#Tip-1-console-trace\" class=\"headerlink\" title=\"Tip 1 console.trace()\"></a>Tip 1 console.trace()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果您想获取日志信息的提示位置，可通过使用console.trace()来获取带有记录数据的堆栈跟踪。</span><br></pre></td></tr></table></figure>\n<h3 id=\"Tip-2-console-time-amp-amp-console-timeEnd\"><a href=\"#Tip-2-console-time-amp-amp-console-timeEnd\" class=\"headerlink\" title=\"Tip 2 console.time() &amp;&amp; console.timeEnd()\"></a>Tip 2 console.time() &amp;&amp; console.timeEnd()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果您试图找到一个比较隐匿的性能问题，请使用console.time()开始计算时间，然后使用console.timeEnd()进行打印。</span><br></pre></td></tr></table></figure>\n<h3 id=\"Tip-3-console-memory\"><a href=\"#Tip-3-console-memory\" class=\"headerlink\" title=\"Tip 3 console.memory\"></a>Tip 3 console.memory</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果你的性能问题更加棘手，并且你正在寻找一个隐匿的内存泄漏，你可能想尝试并利用console.memory（是属性，不是函数）来检查你的堆大小状态。</span><br></pre></td></tr></table></figure>\n<h3 id=\"Tip-4-console-profile-‘profileName’-amp-console-profileEnd-‘profileName’\"><a href=\"#Tip-4-console-profile-‘profileName’-amp-console-profileEnd-‘profileName’\" class=\"headerlink\" title=\"Tip 4 console.profile(‘profileName’) &amp; console.profileEnd(‘profileName’)\"></a>Tip 4 console.profile(‘profileName’) &amp; console.profileEnd(‘profileName’)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这不是标准的方法，但得到了广泛的支持。你可以使用console.profile(&apos;profileName&apos;)，</span><br><span class=\"line\">然后使用console.profileEnd(&apos;profileName&apos;)，从代码中启动和结束浏览器性能工具 – “performance profile”。 </span><br><span class=\"line\">这将帮助您精确地分析您想要的内容，并避免了您单击鼠标，它取决于程序执行时间。</span><br></pre></td></tr></table></figure>\n<h3 id=\"Tip-5-console-count-“STUFF-I-COUNT”\"><a href=\"#Tip-5-console-count-“STUFF-I-COUNT”\" class=\"headerlink\" title=\"Tip 5 console.count(“STUFF I COUNT”)\"></a>Tip 5 console.count(“STUFF I COUNT”)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在函数或代码反复出现的情况下，您可以使用console.count(&apos;?&apos;)来计算您的代码被读取的次数。</span><br></pre></td></tr></table></figure>\n<h3 id=\"Tip-6-console-assert-false-“Log-me-”\"><a href=\"#Tip-6-console-assert-false-“Log-me-”\" class=\"headerlink\" title=\"Tip 6 console.assert(false, “Log me!”)\"></a>Tip 6 console.assert(false, “Log me!”)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是的，条件日志记录并没有用if-else包装你的日志 : )</span><br><span class=\"line\">您可以使用console.assert(condition, msg)在condition为假时记录某些内容。</span><br><span class=\"line\">免责声明：在 Node.js中，这将抛出 Assertion Error！</span><br></pre></td></tr></table></figure>\n<h3 id=\"Tip-7-console-group-‘group’-amp-console-groupEnd-‘group’\"><a href=\"#Tip-7-console-group-‘group’-amp-console-groupEnd-‘group’\" class=\"headerlink\" title=\"Tip 7 console.group(‘group’) &amp; console.groupEnd(‘group’)\"></a>Tip 7 console.group(‘group’) &amp; console.groupEnd(‘group’)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">写了这么多的日志之后，你可能想对它们进行组织。一个小而有用的工具是console.group()和console.groupEnd()。</span><br><span class=\"line\">使用控制台组，将控制台日志组织在一起，每个分组在层次结构中创建另一个级别。 调用groupEnd()减少一个级别(回到上一个层级)。</span><br></pre></td></tr></table></figure>\n<h3 id=\"Tip-8-String-substitutions\"><a href=\"#Tip-8-String-substitutions\" class=\"headerlink\" title=\"Tip 8 String substitutions\"></a>Tip 8 String substitutions</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">记录日志时，可以使用字符串替换合并变量。这些引用是（％s = string，％i = integer，％o = object，％f = float）。</span><br></pre></td></tr></table></figure>\n<h3 id=\"Tip-9-console-clear\"><a href=\"#Tip-9-console-clear\" class=\"headerlink\" title=\"Tip 9 console.clear()\"></a>Tip 9 console.clear()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">那么，写了这么多的日志，现在是时候清理一下你的控制台了。</span><br></pre></td></tr></table></figure>\n<h3 id=\"Tip-10-console-table\"><a href=\"#Tip-10-console-table\" class=\"headerlink\" title=\"Tip 10 console.table()\"></a>Tip 10 console.table()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在我看来，这是一个真正的“瑰宝”！ 你可以使用console.table()打印一个非常漂亮的表格！</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]}